import React, { useState, useEffect } from "react";
import {  useLocation } from "react-router-dom";
import { GridList } from "../../../CommonComponents/KendoComponents";


const HWDetails = () => {
  const location = useLocation();
  const rowData = location.state?.rowData;
  const testBenchHWJson = location.state?.testBenchlistJson.TestBenchHardwareCategory;

  const columns = [    
    { field: 'HardwareCategoryName', title: 'Hardware', },
    { field: 'HardwareSubTypeName', title: 'SubType', },
    { field: 'Count', title: 'Piece', },
    { field: 'JudgementName', title: 'UserFeedback', },
    { field: 'Remark', title: 'Remark', },
    {field:'JudgementWeightage',title:"weightage"}
  ]

  const initialDataState = {
    sort: [
      {
        field: "Name",
        dir: "asc",
      },
    ],
    take: 10,
    skip: 0
  };

  const [data, setData] = useState([]);
  const [gridData, setGridData] = useState(); 


  const getData = async (input) => { 
    //debugger;  
      var json = testBenchHWJson;
      setData(json);
      for(let i = 0; i < json.length; i++)
{
      console.log("length ",json.length," data weightage ",json[i].JudgementWeightage)
      // if(json[i].JudgementWeightage==1){
      //   let value = document.getElementsByClassName("k-grid");
      //   console.log(value, "Value of classname")
      //   if (value == "newStyle") {
      //     value= "k-grid";
      //   } else {
      //     value = "newStyle";
      //   }
      //   console.log(value, "Value of classname")
      // }
 }

    }
  

    useEffect(() => {  
      getData();  
      console.log("Initial State Navigate")
      setGridData({ 
        data: data,    
        initialDataState: initialDataState,
        columns: columns
      
      })
    }, []);
  
    useEffect(() => {    
      if (data != null) {
        console.log("Navigate")
       // debugger;
        setGridData({
          data: data,
          initialDataState: initialDataState,
          columns: columns,        
          NavigationState: ""
        })
      }
    }, [data]);
  
    // const handleGoBack = () => {
    //   navigate(-1);
    // };

    return (
      <div>
          {gridData ? (<GridList gridData={gridData} getData={getData}/>) : (<div>Loading...</div>)}
       </div>
     )
};

export default HWDetails;

based on the weightage change the color of  { field: 'JudgementName', title: 'UserFeedback', }, 1=green, 2=yellow,3=orange, 4=red 
